/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


/// <summary>
/// A TRowMutations object is used to apply a number of Mutations to a single row.
/// </summary>
#if !SILVERLIGHT
[Serializable]
#endif
public partial class TRowMutations : TBase
{
  private byte[] _row;
  private List<TMutation> _mutations;

  public byte[] Row
  {
    get
    {
      return _row;
    }
    set
    {
      __isset.row = true;
      this._row = value;
    }
  }

  public List<TMutation> Mutations
  {
    get
    {
      return _mutations;
    }
    set
    {
      __isset.mutations = true;
      this._mutations = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool row;
    public bool mutations;
  }

  public TRowMutations() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            Row = iprot.ReadBinary();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.List) {
            {
              Mutations = new List<TMutation>();
              TList _list62 = iprot.ReadListBegin();
              for( int _i63 = 0; _i63 < _list62.Count; ++_i63)
              {
                TMutation _elem64 = new TMutation();
                _elem64 = new TMutation();
                _elem64.Read(iprot);
                Mutations.Add(_elem64);
              }
              iprot.ReadListEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("TRowMutations");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (Row != null && __isset.row) {
      field.Name = "row";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(Row);
      oprot.WriteFieldEnd();
    }
    if (Mutations != null && __isset.mutations) {
      field.Name = "mutations";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Mutations.Count));
        foreach (TMutation _iter65 in Mutations)
        {
          _iter65.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("TRowMutations(");
    sb.Append("Row: ");
    sb.Append(Row);
    sb.Append(",Mutations: ");
    sb.Append(Mutations);
    sb.Append(")");
    return sb.ToString();
  }

}

