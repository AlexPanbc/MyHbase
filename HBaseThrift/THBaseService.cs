/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class THBaseService {
  public interface Iface {
    /// <summary>
    /// Test for the existence of columns in the table, as specified in the TGet.
    /// 
    /// @return true if the specified TGet matches one or more keys, false if not
    /// </summary>
    /// <param name="table">the table to check on</param>
    /// <param name="tget">the TGet to check for</param>
    bool exists(byte[] table, TGet tget);
    #if SILVERLIGHT
    IAsyncResult Begin_exists(AsyncCallback callback, object state, byte[] table, TGet tget);
    bool End_exists(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Method for getting data from a row.
    /// 
    /// If the row cannot be found an empty Result is returned.
    /// This can be checked by the empty field of the TResult
    /// 
    /// @return the result
    /// </summary>
    /// <param name="table">the table to get from</param>
    /// <param name="tget">the TGet to fetch</param>
    TResult get(byte[] table, TGet tget);
    #if SILVERLIGHT
    IAsyncResult Begin_get(AsyncCallback callback, object state, byte[] table, TGet tget);
    TResult End_get(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Method for getting multiple rows.
    /// 
    /// If a row cannot be found there will be a null
    /// value in the result list for that TGet at the
    /// same position.
    /// 
    /// So the Results are in the same order as the TGets.
    /// </summary>
    /// <param name="table">the table to get from</param>
    /// <param name="tgets">a list of TGets to fetch, the Result listwill have the Results at corresponding positionsor null if there was an error</param>
    List<TResult> getMultiple(byte[] table, List<TGet> tgets);
    #if SILVERLIGHT
    IAsyncResult Begin_getMultiple(AsyncCallback callback, object state, byte[] table, List<TGet> tgets);
    List<TResult> End_getMultiple(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Commit a TPut to a table.
    /// </summary>
    /// <param name="table">the table to put data in</param>
    /// <param name="tput">the TPut to put</param>
    void put(byte[] table, TPut tput);
    #if SILVERLIGHT
    IAsyncResult Begin_put(AsyncCallback callback, object state, byte[] table, TPut tput);
    void End_put(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Atomically checks if a row/family/qualifier value matches the expected
    /// value. If it does, it adds the TPut.
    /// 
    /// @return true if the new put was executed, false otherwise
    /// </summary>
    /// <param name="table">to check in and put to</param>
    /// <param name="row">row to check</param>
    /// <param name="family">column family to check</param>
    /// <param name="qualifier">column qualifier to check</param>
    /// <param name="value">the expected value, if not provided thecheck is for the non-existence of thecolumn in question</param>
    /// <param name="tput">the TPut to put if the check succeeds</param>
    bool checkAndPut(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TPut tput);
    #if SILVERLIGHT
    IAsyncResult Begin_checkAndPut(AsyncCallback callback, object state, byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TPut tput);
    bool End_checkAndPut(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Commit a List of Puts to the table.
    /// </summary>
    /// <param name="table">the table to put data in</param>
    /// <param name="tputs">a list of TPuts to commit</param>
    void putMultiple(byte[] table, List<TPut> tputs);
    #if SILVERLIGHT
    IAsyncResult Begin_putMultiple(AsyncCallback callback, object state, byte[] table, List<TPut> tputs);
    void End_putMultiple(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Deletes as specified by the TDelete.
    /// 
    /// Note: "delete" is a reserved keyword and cannot be used in Thrift
    /// thus the inconsistent naming scheme from the other functions.
    /// </summary>
    /// <param name="table">the table to delete from</param>
    /// <param name="tdelete">the TDelete to delete</param>
    void deleteSingle(byte[] table, TDelete tdelete);
    #if SILVERLIGHT
    IAsyncResult Begin_deleteSingle(AsyncCallback callback, object state, byte[] table, TDelete tdelete);
    void End_deleteSingle(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Bulk commit a List of TDeletes to the table.
    /// 
    /// Throws a TIOError if any of the deletes fail.
    /// 
    /// Always returns an empty list for backwards compatibility.
    /// </summary>
    /// <param name="table">the table to delete from</param>
    /// <param name="tdeletes">list of TDeletes to delete</param>
    List<TDelete> deleteMultiple(byte[] table, List<TDelete> tdeletes);
    #if SILVERLIGHT
    IAsyncResult Begin_deleteMultiple(AsyncCallback callback, object state, byte[] table, List<TDelete> tdeletes);
    List<TDelete> End_deleteMultiple(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Atomically checks if a row/family/qualifier value matches the expected
    /// value. If it does, it adds the delete.
    /// 
    /// @return true if the new delete was executed, false otherwise
    /// </summary>
    /// <param name="table">to check in and delete from</param>
    /// <param name="row">row to check</param>
    /// <param name="family">column family to check</param>
    /// <param name="qualifier">column qualifier to check</param>
    /// <param name="value">the expected value, if not provided thecheck is for the non-existence of thecolumn in question</param>
    /// <param name="tdelete">the TDelete to execute if the check succeeds</param>
    bool checkAndDelete(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TDelete tdelete);
    #if SILVERLIGHT
    IAsyncResult Begin_checkAndDelete(AsyncCallback callback, object state, byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TDelete tdelete);
    bool End_checkAndDelete(IAsyncResult asyncResult);
    #endif
    TResult increment(byte[] table, TIncrement tincrement);
    #if SILVERLIGHT
    IAsyncResult Begin_increment(AsyncCallback callback, object state, byte[] table, TIncrement tincrement);
    TResult End_increment(IAsyncResult asyncResult);
    #endif
    TResult append(byte[] table, TAppend tappend);
    #if SILVERLIGHT
    IAsyncResult Begin_append(AsyncCallback callback, object state, byte[] table, TAppend tappend);
    TResult End_append(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get a Scanner for the provided TScan object.
    /// 
    /// @return Scanner Id to be used with other scanner procedures
    /// </summary>
    /// <param name="table">the table to get the Scanner for</param>
    /// <param name="tscan">the scan object to get a Scanner for</param>
    int openScanner(byte[] table, TScan tscan);
    #if SILVERLIGHT
    IAsyncResult Begin_openScanner(AsyncCallback callback, object state, byte[] table, TScan tscan);
    int End_openScanner(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Grabs multiple rows from a Scanner.
    /// 
    /// @return Between zero and numRows TResults
    /// </summary>
    /// <param name="scannerId">the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.</param>
    /// <param name="numRows">number of rows to return</param>
    List<TResult> getScannerRows(int scannerId, int numRows);
    #if SILVERLIGHT
    IAsyncResult Begin_getScannerRows(AsyncCallback callback, object state, int scannerId, int numRows);
    List<TResult> End_getScannerRows(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Closes the scanner. Should be called to free server side resources timely.
    /// Typically close once the scanner is not needed anymore, i.e. after looping
    /// over it to get all the required rows.
    /// </summary>
    /// <param name="scannerId">the Id of the Scanner to close *</param>
    void closeScanner(int scannerId);
    #if SILVERLIGHT
    IAsyncResult Begin_closeScanner(AsyncCallback callback, object state, int scannerId);
    void End_closeScanner(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// mutateRow performs multiple mutations atomically on a single row.
    /// </summary>
    /// <param name="table">table to apply the mutations</param>
    /// <param name="trowMutations">mutations to apply</param>
    void mutateRow(byte[] table, TRowMutations trowMutations);
    #if SILVERLIGHT
    IAsyncResult Begin_mutateRow(AsyncCallback callback, object state, byte[] table, TRowMutations trowMutations);
    void End_mutateRow(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get results for the provided TScan object.
    /// This helper function opens a scanner, get the results and close the scanner.
    /// 
    /// @return between zero and numRows TResults
    /// </summary>
    /// <param name="table">the table to get the Scanner for</param>
    /// <param name="tscan">the scan object to get a Scanner for</param>
    /// <param name="numRows">number of rows to return</param>
    List<TResult> getScannerResults(byte[] table, TScan tscan, int numRows);
    #if SILVERLIGHT
    IAsyncResult Begin_getScannerResults(AsyncCallback callback, object state, byte[] table, TScan tscan, int numRows);
    List<TResult> End_getScannerResults(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Given a table and a row get the location of the region that
    /// would contain the given row key.
    /// 
    /// reload = true means the cache will be cleared and the location
    /// will be fetched from meta.
    /// </summary>
    /// <param name="table"></param>
    /// <param name="row"></param>
    /// <param name="reload"></param>
    THRegionLocation getRegionLocation(byte[] table, byte[] row, bool reload);
    #if SILVERLIGHT
    IAsyncResult Begin_getRegionLocation(AsyncCallback callback, object state, byte[] table, byte[] row, bool reload);
    THRegionLocation End_getRegionLocation(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Get all of the region locations for a given table.
    /// 
    /// </summary>
    /// <param name="table"></param>
    List<THRegionLocation> getAllRegionLocations(byte[] table);
    #if SILVERLIGHT
    IAsyncResult Begin_getAllRegionLocations(AsyncCallback callback, object state, byte[] table);
    List<THRegionLocation> End_getAllRegionLocations(IAsyncResult asyncResult);
    #endif
  }

  public class Client : Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    
    #if SILVERLIGHT
    public IAsyncResult Begin_exists(AsyncCallback callback, object state, byte[] table, TGet tget)
    {
      return send_exists(callback, state, table, tget);
    }

    public bool End_exists(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_exists();
    }

    #endif

    /// <summary>
    /// Test for the existence of columns in the table, as specified in the TGet.
    /// 
    /// @return true if the specified TGet matches one or more keys, false if not
    /// </summary>
    /// <param name="table">the table to check on</param>
    /// <param name="tget">the TGet to check for</param>
    public bool exists(byte[] table, TGet tget)
    {
      #if !SILVERLIGHT
      send_exists(table, tget);
      return recv_exists();

      #else
      var asyncResult = Begin_exists(null, null, table, tget);
      return End_exists(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_exists(AsyncCallback callback, object state, byte[] table, TGet tget)
    #else
    public void send_exists(byte[] table, TGet tget)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("exists", TMessageType.Call, seqid_));
      exists_args args = new exists_args();
      args.Table = table;
      args.Tget = tget;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_exists()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      exists_result result = new exists_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exists failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_get(AsyncCallback callback, object state, byte[] table, TGet tget)
    {
      return send_get(callback, state, table, tget);
    }

    public TResult End_get(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_get();
    }

    #endif

    /// <summary>
    /// Method for getting data from a row.
    /// 
    /// If the row cannot be found an empty Result is returned.
    /// This can be checked by the empty field of the TResult
    /// 
    /// @return the result
    /// </summary>
    /// <param name="table">the table to get from</param>
    /// <param name="tget">the TGet to fetch</param>
    public TResult get(byte[] table, TGet tget)
    {
      #if !SILVERLIGHT
      send_get(table, tget);
      return recv_get();

      #else
      var asyncResult = Begin_get(null, null, table, tget);
      return End_get(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_get(AsyncCallback callback, object state, byte[] table, TGet tget)
    #else
    public void send_get(byte[] table, TGet tget)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("get", TMessageType.Call, seqid_));
      get_args args = new get_args();
      args.Table = table;
      args.Tget = tget;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TResult recv_get()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_result result = new get_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getMultiple(AsyncCallback callback, object state, byte[] table, List<TGet> tgets)
    {
      return send_getMultiple(callback, state, table, tgets);
    }

    public List<TResult> End_getMultiple(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMultiple();
    }

    #endif

    /// <summary>
    /// Method for getting multiple rows.
    /// 
    /// If a row cannot be found there will be a null
    /// value in the result list for that TGet at the
    /// same position.
    /// 
    /// So the Results are in the same order as the TGets.
    /// </summary>
    /// <param name="table">the table to get from</param>
    /// <param name="tgets">a list of TGets to fetch, the Result listwill have the Results at corresponding positionsor null if there was an error</param>
    public List<TResult> getMultiple(byte[] table, List<TGet> tgets)
    {
      #if !SILVERLIGHT
      send_getMultiple(table, tgets);
      return recv_getMultiple();

      #else
      var asyncResult = Begin_getMultiple(null, null, table, tgets);
      return End_getMultiple(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMultiple(AsyncCallback callback, object state, byte[] table, List<TGet> tgets)
    #else
    public void send_getMultiple(byte[] table, List<TGet> tgets)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getMultiple", TMessageType.Call, seqid_));
      getMultiple_args args = new getMultiple_args();
      args.Table = table;
      args.Tgets = tgets;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TResult> recv_getMultiple()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMultiple_result result = new getMultiple_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMultiple failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_put(AsyncCallback callback, object state, byte[] table, TPut tput)
    {
      return send_put(callback, state, table, tput);
    }

    public void End_put(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_put();
    }

    #endif

    /// <summary>
    /// Commit a TPut to a table.
    /// </summary>
    /// <param name="table">the table to put data in</param>
    /// <param name="tput">the TPut to put</param>
    public void put(byte[] table, TPut tput)
    {
      #if !SILVERLIGHT
      send_put(table, tput);
      recv_put();

      #else
      var asyncResult = Begin_put(null, null, table, tput);
      End_put(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_put(AsyncCallback callback, object state, byte[] table, TPut tput)
    #else
    public void send_put(byte[] table, TPut tput)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("put", TMessageType.Call, seqid_));
      put_args args = new put_args();
      args.Table = table;
      args.Tput = tput;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_put()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      put_result result = new put_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_checkAndPut(AsyncCallback callback, object state, byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TPut tput)
    {
      return send_checkAndPut(callback, state, table, row, family, qualifier, value, tput);
    }

    public bool End_checkAndPut(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_checkAndPut();
    }

    #endif

    /// <summary>
    /// Atomically checks if a row/family/qualifier value matches the expected
    /// value. If it does, it adds the TPut.
    /// 
    /// @return true if the new put was executed, false otherwise
    /// </summary>
    /// <param name="table">to check in and put to</param>
    /// <param name="row">row to check</param>
    /// <param name="family">column family to check</param>
    /// <param name="qualifier">column qualifier to check</param>
    /// <param name="value">the expected value, if not provided thecheck is for the non-existence of thecolumn in question</param>
    /// <param name="tput">the TPut to put if the check succeeds</param>
    public bool checkAndPut(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TPut tput)
    {
      #if !SILVERLIGHT
      send_checkAndPut(table, row, family, qualifier, value, tput);
      return recv_checkAndPut();

      #else
      var asyncResult = Begin_checkAndPut(null, null, table, row, family, qualifier, value, tput);
      return End_checkAndPut(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_checkAndPut(AsyncCallback callback, object state, byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TPut tput)
    #else
    public void send_checkAndPut(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TPut tput)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("checkAndPut", TMessageType.Call, seqid_));
      checkAndPut_args args = new checkAndPut_args();
      args.Table = table;
      args.Row = row;
      args.Family = family;
      args.Qualifier = qualifier;
      args.Value = value;
      args.Tput = tput;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_checkAndPut()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      checkAndPut_result result = new checkAndPut_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkAndPut failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_putMultiple(AsyncCallback callback, object state, byte[] table, List<TPut> tputs)
    {
      return send_putMultiple(callback, state, table, tputs);
    }

    public void End_putMultiple(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_putMultiple();
    }

    #endif

    /// <summary>
    /// Commit a List of Puts to the table.
    /// </summary>
    /// <param name="table">the table to put data in</param>
    /// <param name="tputs">a list of TPuts to commit</param>
    public void putMultiple(byte[] table, List<TPut> tputs)
    {
      #if !SILVERLIGHT
      send_putMultiple(table, tputs);
      recv_putMultiple();

      #else
      var asyncResult = Begin_putMultiple(null, null, table, tputs);
      End_putMultiple(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_putMultiple(AsyncCallback callback, object state, byte[] table, List<TPut> tputs)
    #else
    public void send_putMultiple(byte[] table, List<TPut> tputs)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("putMultiple", TMessageType.Call, seqid_));
      putMultiple_args args = new putMultiple_args();
      args.Table = table;
      args.Tputs = tputs;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_putMultiple()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      putMultiple_result result = new putMultiple_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deleteSingle(AsyncCallback callback, object state, byte[] table, TDelete tdelete)
    {
      return send_deleteSingle(callback, state, table, tdelete);
    }

    public void End_deleteSingle(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_deleteSingle();
    }

    #endif

    /// <summary>
    /// Deletes as specified by the TDelete.
    /// 
    /// Note: "delete" is a reserved keyword and cannot be used in Thrift
    /// thus the inconsistent naming scheme from the other functions.
    /// </summary>
    /// <param name="table">the table to delete from</param>
    /// <param name="tdelete">the TDelete to delete</param>
    public void deleteSingle(byte[] table, TDelete tdelete)
    {
      #if !SILVERLIGHT
      send_deleteSingle(table, tdelete);
      recv_deleteSingle();

      #else
      var asyncResult = Begin_deleteSingle(null, null, table, tdelete);
      End_deleteSingle(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteSingle(AsyncCallback callback, object state, byte[] table, TDelete tdelete)
    #else
    public void send_deleteSingle(byte[] table, TDelete tdelete)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deleteSingle", TMessageType.Call, seqid_));
      deleteSingle_args args = new deleteSingle_args();
      args.Table = table;
      args.Tdelete = tdelete;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_deleteSingle()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteSingle_result result = new deleteSingle_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deleteMultiple(AsyncCallback callback, object state, byte[] table, List<TDelete> tdeletes)
    {
      return send_deleteMultiple(callback, state, table, tdeletes);
    }

    public List<TDelete> End_deleteMultiple(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteMultiple();
    }

    #endif

    /// <summary>
    /// Bulk commit a List of TDeletes to the table.
    /// 
    /// Throws a TIOError if any of the deletes fail.
    /// 
    /// Always returns an empty list for backwards compatibility.
    /// </summary>
    /// <param name="table">the table to delete from</param>
    /// <param name="tdeletes">list of TDeletes to delete</param>
    public List<TDelete> deleteMultiple(byte[] table, List<TDelete> tdeletes)
    {
      #if !SILVERLIGHT
      send_deleteMultiple(table, tdeletes);
      return recv_deleteMultiple();

      #else
      var asyncResult = Begin_deleteMultiple(null, null, table, tdeletes);
      return End_deleteMultiple(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteMultiple(AsyncCallback callback, object state, byte[] table, List<TDelete> tdeletes)
    #else
    public void send_deleteMultiple(byte[] table, List<TDelete> tdeletes)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deleteMultiple", TMessageType.Call, seqid_));
      deleteMultiple_args args = new deleteMultiple_args();
      args.Table = table;
      args.Tdeletes = tdeletes;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TDelete> recv_deleteMultiple()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteMultiple_result result = new deleteMultiple_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteMultiple failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_checkAndDelete(AsyncCallback callback, object state, byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TDelete tdelete)
    {
      return send_checkAndDelete(callback, state, table, row, family, qualifier, value, tdelete);
    }

    public bool End_checkAndDelete(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_checkAndDelete();
    }

    #endif

    /// <summary>
    /// Atomically checks if a row/family/qualifier value matches the expected
    /// value. If it does, it adds the delete.
    /// 
    /// @return true if the new delete was executed, false otherwise
    /// </summary>
    /// <param name="table">to check in and delete from</param>
    /// <param name="row">row to check</param>
    /// <param name="family">column family to check</param>
    /// <param name="qualifier">column qualifier to check</param>
    /// <param name="value">the expected value, if not provided thecheck is for the non-existence of thecolumn in question</param>
    /// <param name="tdelete">the TDelete to execute if the check succeeds</param>
    public bool checkAndDelete(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TDelete tdelete)
    {
      #if !SILVERLIGHT
      send_checkAndDelete(table, row, family, qualifier, value, tdelete);
      return recv_checkAndDelete();

      #else
      var asyncResult = Begin_checkAndDelete(null, null, table, row, family, qualifier, value, tdelete);
      return End_checkAndDelete(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_checkAndDelete(AsyncCallback callback, object state, byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TDelete tdelete)
    #else
    public void send_checkAndDelete(byte[] table, byte[] row, byte[] family, byte[] qualifier, byte[] value, TDelete tdelete)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("checkAndDelete", TMessageType.Call, seqid_));
      checkAndDelete_args args = new checkAndDelete_args();
      args.Table = table;
      args.Row = row;
      args.Family = family;
      args.Qualifier = qualifier;
      args.Value = value;
      args.Tdelete = tdelete;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_checkAndDelete()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      checkAndDelete_result result = new checkAndDelete_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkAndDelete failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_increment(AsyncCallback callback, object state, byte[] table, TIncrement tincrement)
    {
      return send_increment(callback, state, table, tincrement);
    }

    public TResult End_increment(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_increment();
    }

    #endif

    public TResult increment(byte[] table, TIncrement tincrement)
    {
      #if !SILVERLIGHT
      send_increment(table, tincrement);
      return recv_increment();

      #else
      var asyncResult = Begin_increment(null, null, table, tincrement);
      return End_increment(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_increment(AsyncCallback callback, object state, byte[] table, TIncrement tincrement)
    #else
    public void send_increment(byte[] table, TIncrement tincrement)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("increment", TMessageType.Call, seqid_));
      increment_args args = new increment_args();
      args.Table = table;
      args.Tincrement = tincrement;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TResult recv_increment()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      increment_result result = new increment_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "increment failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_append(AsyncCallback callback, object state, byte[] table, TAppend tappend)
    {
      return send_append(callback, state, table, tappend);
    }

    public TResult End_append(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_append();
    }

    #endif

    public TResult append(byte[] table, TAppend tappend)
    {
      #if !SILVERLIGHT
      send_append(table, tappend);
      return recv_append();

      #else
      var asyncResult = Begin_append(null, null, table, tappend);
      return End_append(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_append(AsyncCallback callback, object state, byte[] table, TAppend tappend)
    #else
    public void send_append(byte[] table, TAppend tappend)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("append", TMessageType.Call, seqid_));
      append_args args = new append_args();
      args.Table = table;
      args.Tappend = tappend;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TResult recv_append()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      append_result result = new append_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "append failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_openScanner(AsyncCallback callback, object state, byte[] table, TScan tscan)
    {
      return send_openScanner(callback, state, table, tscan);
    }

    public int End_openScanner(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_openScanner();
    }

    #endif

    /// <summary>
    /// Get a Scanner for the provided TScan object.
    /// 
    /// @return Scanner Id to be used with other scanner procedures
    /// </summary>
    /// <param name="table">the table to get the Scanner for</param>
    /// <param name="tscan">the scan object to get a Scanner for</param>
    public int openScanner(byte[] table, TScan tscan)
    {
      #if !SILVERLIGHT
      send_openScanner(table, tscan);
      return recv_openScanner();

      #else
      var asyncResult = Begin_openScanner(null, null, table, tscan);
      return End_openScanner(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_openScanner(AsyncCallback callback, object state, byte[] table, TScan tscan)
    #else
    public void send_openScanner(byte[] table, TScan tscan)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("openScanner", TMessageType.Call, seqid_));
      openScanner_args args = new openScanner_args();
      args.Table = table;
      args.Tscan = tscan;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_openScanner()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      openScanner_result result = new openScanner_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "openScanner failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getScannerRows(AsyncCallback callback, object state, int scannerId, int numRows)
    {
      return send_getScannerRows(callback, state, scannerId, numRows);
    }

    public List<TResult> End_getScannerRows(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getScannerRows();
    }

    #endif

    /// <summary>
    /// Grabs multiple rows from a Scanner.
    /// 
    /// @return Between zero and numRows TResults
    /// </summary>
    /// <param name="scannerId">the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.</param>
    /// <param name="numRows">number of rows to return</param>
    public List<TResult> getScannerRows(int scannerId, int numRows)
    {
      #if !SILVERLIGHT
      send_getScannerRows(scannerId, numRows);
      return recv_getScannerRows();

      #else
      var asyncResult = Begin_getScannerRows(null, null, scannerId, numRows);
      return End_getScannerRows(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getScannerRows(AsyncCallback callback, object state, int scannerId, int numRows)
    #else
    public void send_getScannerRows(int scannerId, int numRows)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getScannerRows", TMessageType.Call, seqid_));
      getScannerRows_args args = new getScannerRows_args();
      args.ScannerId = scannerId;
      args.NumRows = numRows;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TResult> recv_getScannerRows()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getScannerRows_result result = new getScannerRows_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      if (result.__isset.ia) {
        throw result.Ia;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getScannerRows failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_closeScanner(AsyncCallback callback, object state, int scannerId)
    {
      return send_closeScanner(callback, state, scannerId);
    }

    public void End_closeScanner(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_closeScanner();
    }

    #endif

    /// <summary>
    /// Closes the scanner. Should be called to free server side resources timely.
    /// Typically close once the scanner is not needed anymore, i.e. after looping
    /// over it to get all the required rows.
    /// </summary>
    /// <param name="scannerId">the Id of the Scanner to close *</param>
    public void closeScanner(int scannerId)
    {
      #if !SILVERLIGHT
      send_closeScanner(scannerId);
      recv_closeScanner();

      #else
      var asyncResult = Begin_closeScanner(null, null, scannerId);
      End_closeScanner(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_closeScanner(AsyncCallback callback, object state, int scannerId)
    #else
    public void send_closeScanner(int scannerId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("closeScanner", TMessageType.Call, seqid_));
      closeScanner_args args = new closeScanner_args();
      args.ScannerId = scannerId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_closeScanner()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      closeScanner_result result = new closeScanner_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      if (result.__isset.ia) {
        throw result.Ia;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_mutateRow(AsyncCallback callback, object state, byte[] table, TRowMutations trowMutations)
    {
      return send_mutateRow(callback, state, table, trowMutations);
    }

    public void End_mutateRow(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_mutateRow();
    }

    #endif

    /// <summary>
    /// mutateRow performs multiple mutations atomically on a single row.
    /// </summary>
    /// <param name="table">table to apply the mutations</param>
    /// <param name="trowMutations">mutations to apply</param>
    public void mutateRow(byte[] table, TRowMutations trowMutations)
    {
      #if !SILVERLIGHT
      send_mutateRow(table, trowMutations);
      recv_mutateRow();

      #else
      var asyncResult = Begin_mutateRow(null, null, table, trowMutations);
      End_mutateRow(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_mutateRow(AsyncCallback callback, object state, byte[] table, TRowMutations trowMutations)
    #else
    public void send_mutateRow(byte[] table, TRowMutations trowMutations)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("mutateRow", TMessageType.Call, seqid_));
      mutateRow_args args = new mutateRow_args();
      args.Table = table;
      args.TrowMutations = trowMutations;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_mutateRow()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      mutateRow_result result = new mutateRow_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.io) {
        throw result.Io;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getScannerResults(AsyncCallback callback, object state, byte[] table, TScan tscan, int numRows)
    {
      return send_getScannerResults(callback, state, table, tscan, numRows);
    }

    public List<TResult> End_getScannerResults(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getScannerResults();
    }

    #endif

    /// <summary>
    /// Get results for the provided TScan object.
    /// This helper function opens a scanner, get the results and close the scanner.
    /// 
    /// @return between zero and numRows TResults
    /// </summary>
    /// <param name="table">the table to get the Scanner for</param>
    /// <param name="tscan">the scan object to get a Scanner for</param>
    /// <param name="numRows">number of rows to return</param>
    public List<TResult> getScannerResults(byte[] table, TScan tscan, int numRows)
    {
      #if !SILVERLIGHT
      send_getScannerResults(table, tscan, numRows);
      return recv_getScannerResults();

      #else
      var asyncResult = Begin_getScannerResults(null, null, table, tscan, numRows);
      return End_getScannerResults(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getScannerResults(AsyncCallback callback, object state, byte[] table, TScan tscan, int numRows)
    #else
    public void send_getScannerResults(byte[] table, TScan tscan, int numRows)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getScannerResults", TMessageType.Call, seqid_));
      getScannerResults_args args = new getScannerResults_args();
      args.Table = table;
      args.Tscan = tscan;
      args.NumRows = numRows;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<TResult> recv_getScannerResults()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getScannerResults_result result = new getScannerResults_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getScannerResults failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getRegionLocation(AsyncCallback callback, object state, byte[] table, byte[] row, bool reload)
    {
      return send_getRegionLocation(callback, state, table, row, reload);
    }

    public THRegionLocation End_getRegionLocation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRegionLocation();
    }

    #endif

    /// <summary>
    /// Given a table and a row get the location of the region that
    /// would contain the given row key.
    /// 
    /// reload = true means the cache will be cleared and the location
    /// will be fetched from meta.
    /// </summary>
    /// <param name="table"></param>
    /// <param name="row"></param>
    /// <param name="reload"></param>
    public THRegionLocation getRegionLocation(byte[] table, byte[] row, bool reload)
    {
      #if !SILVERLIGHT
      send_getRegionLocation(table, row, reload);
      return recv_getRegionLocation();

      #else
      var asyncResult = Begin_getRegionLocation(null, null, table, row, reload);
      return End_getRegionLocation(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRegionLocation(AsyncCallback callback, object state, byte[] table, byte[] row, bool reload)
    #else
    public void send_getRegionLocation(byte[] table, byte[] row, bool reload)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getRegionLocation", TMessageType.Call, seqid_));
      getRegionLocation_args args = new getRegionLocation_args();
      args.Table = table;
      args.Row = row;
      args.Reload = reload;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public THRegionLocation recv_getRegionLocation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRegionLocation_result result = new getRegionLocation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRegionLocation failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getAllRegionLocations(AsyncCallback callback, object state, byte[] table)
    {
      return send_getAllRegionLocations(callback, state, table);
    }

    public List<THRegionLocation> End_getAllRegionLocations(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAllRegionLocations();
    }

    #endif

    /// <summary>
    /// Get all of the region locations for a given table.
    /// 
    /// </summary>
    /// <param name="table"></param>
    public List<THRegionLocation> getAllRegionLocations(byte[] table)
    {
      #if !SILVERLIGHT
      send_getAllRegionLocations(table);
      return recv_getAllRegionLocations();

      #else
      var asyncResult = Begin_getAllRegionLocations(null, null, table);
      return End_getAllRegionLocations(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAllRegionLocations(AsyncCallback callback, object state, byte[] table)
    #else
    public void send_getAllRegionLocations(byte[] table)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getAllRegionLocations", TMessageType.Call, seqid_));
      getAllRegionLocations_args args = new getAllRegionLocations_args();
      args.Table = table;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<THRegionLocation> recv_getAllRegionLocations()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAllRegionLocations_result result = new getAllRegionLocations_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.io) {
        throw result.Io;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllRegionLocations failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["exists"] = exists_Process;
      processMap_["get"] = get_Process;
      processMap_["getMultiple"] = getMultiple_Process;
      processMap_["put"] = put_Process;
      processMap_["checkAndPut"] = checkAndPut_Process;
      processMap_["putMultiple"] = putMultiple_Process;
      processMap_["deleteSingle"] = deleteSingle_Process;
      processMap_["deleteMultiple"] = deleteMultiple_Process;
      processMap_["checkAndDelete"] = checkAndDelete_Process;
      processMap_["increment"] = increment_Process;
      processMap_["append"] = append_Process;
      processMap_["openScanner"] = openScanner_Process;
      processMap_["getScannerRows"] = getScannerRows_Process;
      processMap_["closeScanner"] = closeScanner_Process;
      processMap_["mutateRow"] = mutateRow_Process;
      processMap_["getScannerResults"] = getScannerResults_Process;
      processMap_["getRegionLocation"] = getRegionLocation_Process;
      processMap_["getAllRegionLocations"] = getAllRegionLocations_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void exists_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      exists_args args = new exists_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      exists_result result = new exists_result();
      try {
        result.Success = iface_.exists(args.Table, args.Tget);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("exists", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_args args = new get_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_result result = new get_result();
      try {
        result.Success = iface_.get(args.Table, args.Tget);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("get", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMultiple_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMultiple_args args = new getMultiple_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMultiple_result result = new getMultiple_result();
      try {
        result.Success = iface_.getMultiple(args.Table, args.Tgets);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getMultiple", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void put_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      put_args args = new put_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      put_result result = new put_result();
      try {
        iface_.put(args.Table, args.Tput);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("put", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void checkAndPut_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      checkAndPut_args args = new checkAndPut_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      checkAndPut_result result = new checkAndPut_result();
      try {
        result.Success = iface_.checkAndPut(args.Table, args.Row, args.Family, args.Qualifier, args.Value, args.Tput);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("checkAndPut", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void putMultiple_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      putMultiple_args args = new putMultiple_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      putMultiple_result result = new putMultiple_result();
      try {
        iface_.putMultiple(args.Table, args.Tputs);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("putMultiple", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteSingle_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteSingle_args args = new deleteSingle_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteSingle_result result = new deleteSingle_result();
      try {
        iface_.deleteSingle(args.Table, args.Tdelete);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("deleteSingle", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteMultiple_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteMultiple_args args = new deleteMultiple_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteMultiple_result result = new deleteMultiple_result();
      try {
        result.Success = iface_.deleteMultiple(args.Table, args.Tdeletes);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("deleteMultiple", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void checkAndDelete_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      checkAndDelete_args args = new checkAndDelete_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      checkAndDelete_result result = new checkAndDelete_result();
      try {
        result.Success = iface_.checkAndDelete(args.Table, args.Row, args.Family, args.Qualifier, args.Value, args.Tdelete);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("checkAndDelete", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void increment_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      increment_args args = new increment_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      increment_result result = new increment_result();
      try {
        result.Success = iface_.increment(args.Table, args.Tincrement);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("increment", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void append_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      append_args args = new append_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      append_result result = new append_result();
      try {
        result.Success = iface_.append(args.Table, args.Tappend);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("append", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void openScanner_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      openScanner_args args = new openScanner_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      openScanner_result result = new openScanner_result();
      try {
        result.Success = iface_.openScanner(args.Table, args.Tscan);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("openScanner", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getScannerRows_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getScannerRows_args args = new getScannerRows_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getScannerRows_result result = new getScannerRows_result();
      try {
        result.Success = iface_.getScannerRows(args.ScannerId, args.NumRows);
      } catch (TIOError io) {
        result.Io = io;
      } catch (TIllegalArgument ia) {
        result.Ia = ia;
      }
      oprot.WriteMessageBegin(new TMessage("getScannerRows", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void closeScanner_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      closeScanner_args args = new closeScanner_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      closeScanner_result result = new closeScanner_result();
      try {
        iface_.closeScanner(args.ScannerId);
      } catch (TIOError io) {
        result.Io = io;
      } catch (TIllegalArgument ia) {
        result.Ia = ia;
      }
      oprot.WriteMessageBegin(new TMessage("closeScanner", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void mutateRow_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      mutateRow_args args = new mutateRow_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      mutateRow_result result = new mutateRow_result();
      try {
        iface_.mutateRow(args.Table, args.TrowMutations);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("mutateRow", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getScannerResults_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getScannerResults_args args = new getScannerResults_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getScannerResults_result result = new getScannerResults_result();
      try {
        result.Success = iface_.getScannerResults(args.Table, args.Tscan, args.NumRows);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getScannerResults", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRegionLocation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRegionLocation_args args = new getRegionLocation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRegionLocation_result result = new getRegionLocation_result();
      try {
        result.Success = iface_.getRegionLocation(args.Table, args.Row, args.Reload);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getRegionLocation", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAllRegionLocations_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAllRegionLocations_args args = new getAllRegionLocations_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAllRegionLocations_result result = new getAllRegionLocations_result();
      try {
        result.Success = iface_.getAllRegionLocations(args.Table);
      } catch (TIOError io) {
        result.Io = io;
      }
      oprot.WriteMessageBegin(new TMessage("getAllRegionLocations", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class exists_args : TBase
  {
    private byte[] _table;
    private TGet _tget;

    /// <summary>
    /// the table to check on
    /// </summary>
    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    /// <summary>
    /// the TGet to check for
    /// </summary>
    public TGet Tget
    {
      get
      {
        return _tget;
      }
      set
      {
        __isset.tget = true;
        this._tget = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool tget;
    }

    public exists_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Tget = new TGet();
              Tget.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("exists_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (Tget != null && __isset.tget) {
        field.Name = "tget";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Tget.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("exists_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",Tget: ");
      sb.Append(Tget== null ? "<null>" : Tget.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class exists_result : TBase
  {
    private bool _success;
    private TIOError _io;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public exists_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Bool) {
              Success = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("exists_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.Bool;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Success);
        oprot.WriteFieldEnd();
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("exists_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_args : TBase
  {
    private byte[] _table;
    private TGet _tget;

    /// <summary>
    /// the table to get from
    /// </summary>
    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    /// <summary>
    /// the TGet to fetch
    /// </summary>
    public TGet Tget
    {
      get
      {
        return _tget;
      }
      set
      {
        __isset.tget = true;
        this._tget = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool tget;
    }

    public get_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Tget = new TGet();
              Tget.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("get_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (Tget != null && __isset.tget) {
        field.Name = "tget";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Tget.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("get_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",Tget: ");
      sb.Append(Tget== null ? "<null>" : Tget.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class get_result : TBase
  {
    private TResult _success;
    private TIOError _io;

    public TResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public get_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new TResult();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("get_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("get_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMultiple_args : TBase
  {
    private byte[] _table;
    private List<TGet> _tgets;

    /// <summary>
    /// the table to get from
    /// </summary>
    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    /// <summary>
    /// a list of TGets to fetch, the Result list
    /// will have the Results at corresponding positions
    /// or null if there was an error
    /// </summary>
    public List<TGet> Tgets
    {
      get
      {
        return _tgets;
      }
      set
      {
        __isset.tgets = true;
        this._tgets = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool tgets;
    }

    public getMultiple_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Tgets = new List<TGet>();
                TList _list66 = iprot.ReadListBegin();
                for( int _i67 = 0; _i67 < _list66.Count; ++_i67)
                {
                  TGet _elem68 = new TGet();
                  _elem68 = new TGet();
                  _elem68.Read(iprot);
                  Tgets.Add(_elem68);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getMultiple_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (Tgets != null && __isset.tgets) {
        field.Name = "tgets";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Tgets.Count));
          foreach (TGet _iter69 in Tgets)
          {
            _iter69.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getMultiple_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",Tgets: ");
      sb.Append(Tgets);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMultiple_result : TBase
  {
    private List<TResult> _success;
    private TIOError _io;

    public List<TResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getMultiple_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TResult>();
                TList _list70 = iprot.ReadListBegin();
                for( int _i71 = 0; _i71 < _list70.Count; ++_i71)
                {
                  TResult _elem72 = new TResult();
                  _elem72 = new TResult();
                  _elem72.Read(iprot);
                  Success.Add(_elem72);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getMultiple_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TResult _iter73 in Success)
            {
              _iter73.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getMultiple_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class put_args : TBase
  {
    private byte[] _table;
    private TPut _tput;

    /// <summary>
    /// the table to put data in
    /// </summary>
    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    /// <summary>
    /// the TPut to put
    /// </summary>
    public TPut Tput
    {
      get
      {
        return _tput;
      }
      set
      {
        __isset.tput = true;
        this._tput = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool tput;
    }

    public put_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Tput = new TPut();
              Tput.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("put_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (Tput != null && __isset.tput) {
        field.Name = "tput";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Tput.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("put_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",Tput: ");
      sb.Append(Tput== null ? "<null>" : Tput.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class put_result : TBase
  {
    private TIOError _io;

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
    }

    public put_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("put_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("put_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class checkAndPut_args : TBase
  {
    private byte[] _table;
    private byte[] _row;
    private byte[] _family;
    private byte[] _qualifier;
    private byte[] _value;
    private TPut _tput;

    /// <summary>
    /// to check in and put to
    /// </summary>
    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    /// <summary>
    /// row to check
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// column family to check
    /// </summary>
    public byte[] Family
    {
      get
      {
        return _family;
      }
      set
      {
        __isset.family = true;
        this._family = value;
      }
    }

    /// <summary>
    /// column qualifier to check
    /// </summary>
    public byte[] Qualifier
    {
      get
      {
        return _qualifier;
      }
      set
      {
        __isset.qualifier = true;
        this._qualifier = value;
      }
    }

    /// <summary>
    /// the expected value, if not provided the
    /// check is for the non-existence of the
    /// column in question
    /// </summary>
    public byte[] Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.value = true;
        this._value = value;
      }
    }

    /// <summary>
    /// the TPut to put if the check succeeds
    /// </summary>
    public TPut Tput
    {
      get
      {
        return _tput;
      }
      set
      {
        __isset.tput = true;
        this._tput = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool row;
      public bool family;
      public bool qualifier;
      public bool value;
      public bool tput;
    }

    public checkAndPut_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Family = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Qualifier = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Value = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              Tput = new TPut();
              Tput.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("checkAndPut_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (Family != null && __isset.family) {
        field.Name = "family";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Family);
        oprot.WriteFieldEnd();
      }
      if (Qualifier != null && __isset.qualifier) {
        field.Name = "qualifier";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Qualifier);
        oprot.WriteFieldEnd();
      }
      if (Value != null && __isset.value) {
        field.Name = "value";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Value);
        oprot.WriteFieldEnd();
      }
      if (Tput != null && __isset.tput) {
        field.Name = "tput";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        Tput.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("checkAndPut_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Family: ");
      sb.Append(Family);
      sb.Append(",Qualifier: ");
      sb.Append(Qualifier);
      sb.Append(",Value: ");
      sb.Append(Value);
      sb.Append(",Tput: ");
      sb.Append(Tput== null ? "<null>" : Tput.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class checkAndPut_result : TBase
  {
    private bool _success;
    private TIOError _io;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public checkAndPut_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Bool) {
              Success = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("checkAndPut_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.Bool;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Success);
        oprot.WriteFieldEnd();
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("checkAndPut_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class putMultiple_args : TBase
  {
    private byte[] _table;
    private List<TPut> _tputs;

    /// <summary>
    /// the table to put data in
    /// </summary>
    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    /// <summary>
    /// a list of TPuts to commit
    /// </summary>
    public List<TPut> Tputs
    {
      get
      {
        return _tputs;
      }
      set
      {
        __isset.tputs = true;
        this._tputs = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool tputs;
    }

    public putMultiple_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Tputs = new List<TPut>();
                TList _list74 = iprot.ReadListBegin();
                for( int _i75 = 0; _i75 < _list74.Count; ++_i75)
                {
                  TPut _elem76 = new TPut();
                  _elem76 = new TPut();
                  _elem76.Read(iprot);
                  Tputs.Add(_elem76);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("putMultiple_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (Tputs != null && __isset.tputs) {
        field.Name = "tputs";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Tputs.Count));
          foreach (TPut _iter77 in Tputs)
          {
            _iter77.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("putMultiple_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",Tputs: ");
      sb.Append(Tputs);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class putMultiple_result : TBase
  {
    private TIOError _io;

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
    }

    public putMultiple_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("putMultiple_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("putMultiple_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteSingle_args : TBase
  {
    private byte[] _table;
    private TDelete _tdelete;

    /// <summary>
    /// the table to delete from
    /// </summary>
    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    /// <summary>
    /// the TDelete to delete
    /// </summary>
    public TDelete Tdelete
    {
      get
      {
        return _tdelete;
      }
      set
      {
        __isset.tdelete = true;
        this._tdelete = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool tdelete;
    }

    public deleteSingle_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Tdelete = new TDelete();
              Tdelete.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deleteSingle_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (Tdelete != null && __isset.tdelete) {
        field.Name = "tdelete";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Tdelete.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("deleteSingle_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",Tdelete: ");
      sb.Append(Tdelete== null ? "<null>" : Tdelete.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteSingle_result : TBase
  {
    private TIOError _io;

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
    }

    public deleteSingle_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deleteSingle_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("deleteSingle_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteMultiple_args : TBase
  {
    private byte[] _table;
    private List<TDelete> _tdeletes;

    /// <summary>
    /// the table to delete from
    /// </summary>
    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    /// <summary>
    /// list of TDeletes to delete
    /// </summary>
    public List<TDelete> Tdeletes
    {
      get
      {
        return _tdeletes;
      }
      set
      {
        __isset.tdeletes = true;
        this._tdeletes = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool tdeletes;
    }

    public deleteMultiple_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Tdeletes = new List<TDelete>();
                TList _list78 = iprot.ReadListBegin();
                for( int _i79 = 0; _i79 < _list78.Count; ++_i79)
                {
                  TDelete _elem80 = new TDelete();
                  _elem80 = new TDelete();
                  _elem80.Read(iprot);
                  Tdeletes.Add(_elem80);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deleteMultiple_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (Tdeletes != null && __isset.tdeletes) {
        field.Name = "tdeletes";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Tdeletes.Count));
          foreach (TDelete _iter81 in Tdeletes)
          {
            _iter81.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("deleteMultiple_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",Tdeletes: ");
      sb.Append(Tdeletes);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteMultiple_result : TBase
  {
    private List<TDelete> _success;
    private TIOError _io;

    public List<TDelete> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public deleteMultiple_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TDelete>();
                TList _list82 = iprot.ReadListBegin();
                for( int _i83 = 0; _i83 < _list82.Count; ++_i83)
                {
                  TDelete _elem84 = new TDelete();
                  _elem84 = new TDelete();
                  _elem84.Read(iprot);
                  Success.Add(_elem84);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("deleteMultiple_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TDelete _iter85 in Success)
            {
              _iter85.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("deleteMultiple_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class checkAndDelete_args : TBase
  {
    private byte[] _table;
    private byte[] _row;
    private byte[] _family;
    private byte[] _qualifier;
    private byte[] _value;
    private TDelete _tdelete;

    /// <summary>
    /// to check in and delete from
    /// </summary>
    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    /// <summary>
    /// row to check
    /// </summary>
    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    /// <summary>
    /// column family to check
    /// </summary>
    public byte[] Family
    {
      get
      {
        return _family;
      }
      set
      {
        __isset.family = true;
        this._family = value;
      }
    }

    /// <summary>
    /// column qualifier to check
    /// </summary>
    public byte[] Qualifier
    {
      get
      {
        return _qualifier;
      }
      set
      {
        __isset.qualifier = true;
        this._qualifier = value;
      }
    }

    /// <summary>
    /// the expected value, if not provided the
    /// check is for the non-existence of the
    /// column in question
    /// </summary>
    public byte[] Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.value = true;
        this._value = value;
      }
    }

    /// <summary>
    /// the TDelete to execute if the check succeeds
    /// </summary>
    public TDelete Tdelete
    {
      get
      {
        return _tdelete;
      }
      set
      {
        __isset.tdelete = true;
        this._tdelete = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool row;
      public bool family;
      public bool qualifier;
      public bool value;
      public bool tdelete;
    }

    public checkAndDelete_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Family = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Qualifier = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Value = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              Tdelete = new TDelete();
              Tdelete.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("checkAndDelete_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (Family != null && __isset.family) {
        field.Name = "family";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Family);
        oprot.WriteFieldEnd();
      }
      if (Qualifier != null && __isset.qualifier) {
        field.Name = "qualifier";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Qualifier);
        oprot.WriteFieldEnd();
      }
      if (Value != null && __isset.value) {
        field.Name = "value";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Value);
        oprot.WriteFieldEnd();
      }
      if (Tdelete != null && __isset.tdelete) {
        field.Name = "tdelete";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        Tdelete.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("checkAndDelete_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Family: ");
      sb.Append(Family);
      sb.Append(",Qualifier: ");
      sb.Append(Qualifier);
      sb.Append(",Value: ");
      sb.Append(Value);
      sb.Append(",Tdelete: ");
      sb.Append(Tdelete== null ? "<null>" : Tdelete.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class checkAndDelete_result : TBase
  {
    private bool _success;
    private TIOError _io;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public checkAndDelete_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Bool) {
              Success = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("checkAndDelete_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.Bool;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Success);
        oprot.WriteFieldEnd();
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("checkAndDelete_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class increment_args : TBase
  {
    private byte[] _table;
    private TIncrement _tincrement;

    /// <summary>
    /// the table to increment the value on
    /// </summary>
    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    /// <summary>
    /// the TIncrement to increment
    /// </summary>
    public TIncrement Tincrement
    {
      get
      {
        return _tincrement;
      }
      set
      {
        __isset.tincrement = true;
        this._tincrement = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool tincrement;
    }

    public increment_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Tincrement = new TIncrement();
              Tincrement.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("increment_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (Tincrement != null && __isset.tincrement) {
        field.Name = "tincrement";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Tincrement.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("increment_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",Tincrement: ");
      sb.Append(Tincrement== null ? "<null>" : Tincrement.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class increment_result : TBase
  {
    private TResult _success;
    private TIOError _io;

    public TResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public increment_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new TResult();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("increment_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("increment_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class append_args : TBase
  {
    private byte[] _table;
    private TAppend _tappend;

    /// <summary>
    /// the table to append the value on
    /// </summary>
    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    /// <summary>
    /// the TAppend to append
    /// </summary>
    public TAppend Tappend
    {
      get
      {
        return _tappend;
      }
      set
      {
        __isset.tappend = true;
        this._tappend = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool tappend;
    }

    public append_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Tappend = new TAppend();
              Tappend.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("append_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (Tappend != null && __isset.tappend) {
        field.Name = "tappend";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Tappend.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("append_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",Tappend: ");
      sb.Append(Tappend== null ? "<null>" : Tappend.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class append_result : TBase
  {
    private TResult _success;
    private TIOError _io;

    public TResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public append_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new TResult();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("append_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("append_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class openScanner_args : TBase
  {
    private byte[] _table;
    private TScan _tscan;

    /// <summary>
    /// the table to get the Scanner for
    /// </summary>
    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    /// <summary>
    /// the scan object to get a Scanner for
    /// </summary>
    public TScan Tscan
    {
      get
      {
        return _tscan;
      }
      set
      {
        __isset.tscan = true;
        this._tscan = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool tscan;
    }

    public openScanner_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Tscan = new TScan();
              Tscan.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("openScanner_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (Tscan != null && __isset.tscan) {
        field.Name = "tscan";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Tscan.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("openScanner_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",Tscan: ");
      sb.Append(Tscan== null ? "<null>" : Tscan.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class openScanner_result : TBase
  {
    private int _success;
    private TIOError _io;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public openScanner_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I32) {
              Success = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("openScanner_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "Success";
        field.Type = TType.I32;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Success);
        oprot.WriteFieldEnd();
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("openScanner_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getScannerRows_args : TBase
  {
    private int _scannerId;
    private int _numRows;

    /// <summary>
    /// the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
    /// </summary>
    public int ScannerId
    {
      get
      {
        return _scannerId;
      }
      set
      {
        __isset.scannerId = true;
        this._scannerId = value;
      }
    }

    /// <summary>
    /// number of rows to return
    /// </summary>
    public int NumRows
    {
      get
      {
        return _numRows;
      }
      set
      {
        __isset.numRows = true;
        this._numRows = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool scannerId;
      public bool numRows;
    }

    public getScannerRows_args() {
      this._numRows = 1;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ScannerId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              NumRows = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getScannerRows_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.scannerId) {
        field.Name = "scannerId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ScannerId);
        oprot.WriteFieldEnd();
      }
      if (__isset.numRows) {
        field.Name = "numRows";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumRows);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getScannerRows_args(");
      sb.Append("ScannerId: ");
      sb.Append(ScannerId);
      sb.Append(",NumRows: ");
      sb.Append(NumRows);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getScannerRows_result : TBase
  {
    private List<TResult> _success;
    private TIOError _io;
    private TIllegalArgument _ia;

    public List<TResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    /// <summary>
    /// if the scannerId is invalid
    /// </summary>
    public TIllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
      public bool ia;
    }

    public getScannerRows_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TResult>();
                TList _list86 = iprot.ReadListBegin();
                for( int _i87 = 0; _i87 < _list86.Count; ++_i87)
                {
                  TResult _elem88 = new TResult();
                  _elem88 = new TResult();
                  _elem88.Read(iprot);
                  Success.Add(_elem88);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ia = new TIllegalArgument();
              Ia.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getScannerRows_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TResult _iter89 in Success)
            {
              _iter89.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ia) {
        if (Ia != null) {
          field.Name = "Ia";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ia.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getScannerRows_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(",Ia: ");
      sb.Append(Ia== null ? "<null>" : Ia.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class closeScanner_args : TBase
  {
    private int _scannerId;

    /// <summary>
    /// the Id of the Scanner to close *
    /// </summary>
    public int ScannerId
    {
      get
      {
        return _scannerId;
      }
      set
      {
        __isset.scannerId = true;
        this._scannerId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool scannerId;
    }

    public closeScanner_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ScannerId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("closeScanner_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.scannerId) {
        field.Name = "scannerId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ScannerId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("closeScanner_args(");
      sb.Append("ScannerId: ");
      sb.Append(ScannerId);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class closeScanner_result : TBase
  {
    private TIOError _io;
    private TIllegalArgument _ia;

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }

    /// <summary>
    /// if the scannerId is invalid
    /// </summary>
    public TIllegalArgument Ia
    {
      get
      {
        return _ia;
      }
      set
      {
        __isset.ia = true;
        this._ia = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
      public bool ia;
    }

    public closeScanner_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Ia = new TIllegalArgument();
              Ia.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("closeScanner_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.ia) {
        if (Ia != null) {
          field.Name = "Ia";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Ia.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("closeScanner_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(",Ia: ");
      sb.Append(Ia== null ? "<null>" : Ia.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class mutateRow_args : TBase
  {
    private byte[] _table;
    private TRowMutations _trowMutations;

    /// <summary>
    /// table to apply the mutations
    /// </summary>
    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    /// <summary>
    /// mutations to apply
    /// </summary>
    public TRowMutations TrowMutations
    {
      get
      {
        return _trowMutations;
      }
      set
      {
        __isset.trowMutations = true;
        this._trowMutations = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool trowMutations;
    }

    public mutateRow_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              TrowMutations = new TRowMutations();
              TrowMutations.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("mutateRow_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (TrowMutations != null && __isset.trowMutations) {
        field.Name = "trowMutations";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        TrowMutations.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("mutateRow_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",TrowMutations: ");
      sb.Append(TrowMutations== null ? "<null>" : TrowMutations.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class mutateRow_result : TBase
  {
    private TIOError _io;

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool io;
    }

    public mutateRow_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("mutateRow_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("mutateRow_result(");
      sb.Append("Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getScannerResults_args : TBase
  {
    private byte[] _table;
    private TScan _tscan;
    private int _numRows;

    /// <summary>
    /// the table to get the Scanner for
    /// </summary>
    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    /// <summary>
    /// the scan object to get a Scanner for
    /// </summary>
    public TScan Tscan
    {
      get
      {
        return _tscan;
      }
      set
      {
        __isset.tscan = true;
        this._tscan = value;
      }
    }

    /// <summary>
    /// number of rows to return
    /// </summary>
    public int NumRows
    {
      get
      {
        return _numRows;
      }
      set
      {
        __isset.numRows = true;
        this._numRows = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool tscan;
      public bool numRows;
    }

    public getScannerResults_args() {
      this._numRows = 1;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Tscan = new TScan();
              Tscan.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              NumRows = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getScannerResults_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (Tscan != null && __isset.tscan) {
        field.Name = "tscan";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Tscan.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.numRows) {
        field.Name = "numRows";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumRows);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getScannerResults_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",Tscan: ");
      sb.Append(Tscan== null ? "<null>" : Tscan.ToString());
      sb.Append(",NumRows: ");
      sb.Append(NumRows);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getScannerResults_result : TBase
  {
    private List<TResult> _success;
    private TIOError _io;

    public List<TResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getScannerResults_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<TResult>();
                TList _list90 = iprot.ReadListBegin();
                for( int _i91 = 0; _i91 < _list90.Count; ++_i91)
                {
                  TResult _elem92 = new TResult();
                  _elem92 = new TResult();
                  _elem92.Read(iprot);
                  Success.Add(_elem92);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getScannerResults_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (TResult _iter93 in Success)
            {
              _iter93.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getScannerResults_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRegionLocation_args : TBase
  {
    private byte[] _table;
    private byte[] _row;
    private bool _reload;

    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }

    public byte[] Row
    {
      get
      {
        return _row;
      }
      set
      {
        __isset.row = true;
        this._row = value;
      }
    }

    public bool Reload
    {
      get
      {
        return _reload;
      }
      set
      {
        __isset.reload = true;
        this._reload = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
      public bool row;
      public bool reload;
    }

    public getRegionLocation_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Row = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              Reload = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRegionLocation_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      if (Row != null && __isset.row) {
        field.Name = "row";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Row);
        oprot.WriteFieldEnd();
      }
      if (__isset.reload) {
        field.Name = "reload";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Reload);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRegionLocation_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(",Row: ");
      sb.Append(Row);
      sb.Append(",Reload: ");
      sb.Append(Reload);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRegionLocation_result : TBase
  {
    private THRegionLocation _success;
    private TIOError _io;

    public THRegionLocation Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getRegionLocation_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              Success = new THRegionLocation();
              Success.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getRegionLocation_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          Success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getRegionLocation_result(");
      sb.Append("Success: ");
      sb.Append(Success== null ? "<null>" : Success.ToString());
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllRegionLocations_args : TBase
  {
    private byte[] _table;

    public byte[] Table
    {
      get
      {
        return _table;
      }
      set
      {
        __isset.table = true;
        this._table = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool table;
    }

    public getAllRegionLocations_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Table = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getAllRegionLocations_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Table);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getAllRegionLocations_args(");
      sb.Append("Table: ");
      sb.Append(Table);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllRegionLocations_result : TBase
  {
    private List<THRegionLocation> _success;
    private TIOError _io;

    public List<THRegionLocation> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TIOError Io
    {
      get
      {
        return _io;
      }
      set
      {
        __isset.io = true;
        this._io = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool io;
    }

    public getAllRegionLocations_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                Success = new List<THRegionLocation>();
                TList _list94 = iprot.ReadListBegin();
                for( int _i95 = 0; _i95 < _list94.Count; ++_i95)
                {
                  THRegionLocation _elem96 = new THRegionLocation();
                  _elem96 = new THRegionLocation();
                  _elem96.Read(iprot);
                  Success.Add(_elem96);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 1:
            if (field.Type == TType.Struct) {
              Io = new TIOError();
              Io.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("getAllRegionLocations_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (Success != null) {
          field.Name = "Success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
            foreach (THRegionLocation _iter97 in Success)
            {
              _iter97.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
      } else if (this.__isset.io) {
        if (Io != null) {
          field.Name = "Io";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Io.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("getAllRegionLocations_result(");
      sb.Append("Success: ");
      sb.Append(Success);
      sb.Append(",Io: ");
      sb.Append(Io== null ? "<null>" : Io.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
