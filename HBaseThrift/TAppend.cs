/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TAppend : TBase
{
  private byte[] _row;
  private List<TColumnValue> _columns;
  private Dictionary<byte[], byte[]> _attributes;
  private TDurability _durability;
  private TCellVisibility _cellVisibility;

  public byte[] Row
  {
    get
    {
      return _row;
    }
    set
    {
      __isset.row = true;
      this._row = value;
    }
  }

  public List<TColumnValue> Columns
  {
    get
    {
      return _columns;
    }
    set
    {
      __isset.columns = true;
      this._columns = value;
    }
  }

  public Dictionary<byte[], byte[]> Attributes
  {
    get
    {
      return _attributes;
    }
    set
    {
      __isset.attributes = true;
      this._attributes = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="TDurability"/>
  /// </summary>
  public TDurability Durability
  {
    get
    {
      return _durability;
    }
    set
    {
      __isset.durability = true;
      this._durability = value;
    }
  }

  public TCellVisibility CellVisibility
  {
    get
    {
      return _cellVisibility;
    }
    set
    {
      __isset.cellVisibility = true;
      this._cellVisibility = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool row;
    public bool columns;
    public bool attributes;
    public bool durability;
    public bool cellVisibility;
  }

  public TAppend() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            Row = iprot.ReadBinary();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.List) {
            {
              Columns = new List<TColumnValue>();
              TList _list44 = iprot.ReadListBegin();
              for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
              {
                TColumnValue _elem46 = new TColumnValue();
                _elem46 = new TColumnValue();
                _elem46.Read(iprot);
                Columns.Add(_elem46);
              }
              iprot.ReadListEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.Map) {
            {
              Attributes = new Dictionary<byte[], byte[]>();
              TMap _map47 = iprot.ReadMapBegin();
              for( int _i48 = 0; _i48 < _map47.Count; ++_i48)
              {
                byte[] _key49;
                byte[] _val50;
                _key49 = iprot.ReadBinary();
                _val50 = iprot.ReadBinary();
                Attributes[_key49] = _val50;
              }
              iprot.ReadMapEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.I32) {
            Durability = (TDurability)iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.Struct) {
            CellVisibility = new TCellVisibility();
            CellVisibility.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("TAppend");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (Row != null && __isset.row) {
      field.Name = "row";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(Row);
      oprot.WriteFieldEnd();
    }
    if (Columns != null && __isset.columns) {
      field.Name = "columns";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Columns.Count));
        foreach (TColumnValue _iter51 in Columns)
        {
          _iter51.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
    }
    if (Attributes != null && __isset.attributes) {
      field.Name = "attributes";
      field.Type = TType.Map;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.String, Attributes.Count));
        foreach (byte[] _iter52 in Attributes.Keys)
        {
          oprot.WriteBinary(_iter52);
          oprot.WriteBinary(Attributes[_iter52]);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
    }
    if (__isset.durability) {
      field.Name = "durability";
      field.Type = TType.I32;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)Durability);
      oprot.WriteFieldEnd();
    }
    if (CellVisibility != null && __isset.cellVisibility) {
      field.Name = "cellVisibility";
      field.Type = TType.Struct;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      CellVisibility.Write(oprot);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("TAppend(");
    sb.Append("Row: ");
    sb.Append(Row);
    sb.Append(",Columns: ");
    sb.Append(Columns);
    sb.Append(",Attributes: ");
    sb.Append(Attributes);
    sb.Append(",Durability: ");
    sb.Append(Durability);
    sb.Append(",CellVisibility: ");
    sb.Append(CellVisibility== null ? "<null>" : CellVisibility.ToString());
    sb.Append(")");
    return sb.ToString();
  }

}

